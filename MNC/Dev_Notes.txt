      <div>   
            <button type="button" class="btn btn-primary btn-lg" 
            @onload="test">Select Notes</button>
            
        </div> 


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

<h3>ScaleConvert</h3>

@code {

}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

C CS D DS E F FS G GS A AS B
0 1  2 3  4 5 6  7 8  9 10 11
C CS D DS E F FS G GS A AS B
1213 1415 161718 1920 2122 23

  TextField="@((item)=>item.NoteId)" 

     ValueField="@((item)=>item.NoteId)"  

<CheckBoxList Data="@ScaleList"  
                          TextField="@((item)=>item.NoteId)"
                          ValueField="@((item)=>item.WorkNote)"
                          
                          SelectedValues="@SelectedIds" />  

gives >>>  C    C#    D    D#    E    F    F#    G    G#    A    A#    B 
           0    1     2    3     4    5    6     7    8     9    10    11

          start with all cells set to -1

          gives >>>  C    C#    D    D#    E    F    F#    G    G#    A    A#    B 
                     0    1     2    3     4    5    6     7    8     9    10    11

                     0          2          4    5          7          9    
         ??? or start at 1
          

0 11 4 7

  public int? WorkList { get; set; }
        public List<Scale>? WorkListTwo { get; set; }

         new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 
                12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23 };

                 scaleBig[0] = 0;
                 scaleBig[12] = 12;

                
        scaleBig[WorkNote] = WorkNote;
        scaleBig[WorkNoteTwo] = WorkNoteTwo;


             
      public  int WorkNote = -1;
      public  int WorkNoteTwo = -1;

       var vSubListWN = new List<Scale>
            {
                C, CS, D, DS, E, F, FS, G, GS, A, AS, B


        };
            var vSubListWNTwo = new List<Scale>
            {
                C, CS, D, DS, E, F, FS, G, GS, A, AS, B

            };


                      foreach (var item in ScaleList)
            {
                OutPutValue = item.WorkNote.GetValueOrDefault();
            }

   public string NoteHolderTest()
        {
            string workNoteS = "";
            int workNoteL = -1;
            Scale scale = new Scale();
           workNoteL  = (int)scale.WorkNote;
            workNoteS = Convert.ToString(workNoteL);

            return workNoteS;   
         
        }



 using StreamWriter noteId = new("notes.txt", append: true);


    private const string Path = "notes.txt";
    using StreamWriter noteId = new(Path, append: false);

    ======================================

    string fileName = @"notes.txt";
StreamWriter noteWrite = new("Logic.txt", append: true);

using (StreamReader streamReader = File.OpenText(fileName))
{
    string note = streamReader.ReadToEnd();
    if (note.Contains("C"))
    {
      
        noteWrite.Write("found c ");
    }
        
  

    noteWrite.WriteLine(note);
}


noteWrite.Close();

--------------------------------------------------

 public class Logic
    {
        public string noteStart = System.IO.File.ReadAllText(@"notes.txt");
        public void LogicCreate()
        {
            
            if (noteStart.Contains("C"))
            {
                StreamWriter sw = new("notes.txt", append: true);
                sw.Write("found c ");
            }

        }
    }

    //////////////////////////////////////////////////
    

      //temp = File.ReadAllText(@"notes.txt");

            //foreach (var item in temp)
            //{
            //    if (item.Equals("C"))
            //    {
            //        noteId.WriteLine("found C ");
            //    }
            //}


          //  string fileName = @"notes.txt";
         //   StreamWriter noteWrite = new("notes.txt", append: true);

         //   noteWrite.Close();

            //using (StreamReader streamReader = File.OpenText(fileName))
            //{
            //    string note = streamReader.ReadToEnd();
            //    if (note.Contains("C"))
            //    {

            //        noteWrite.Write("found c ");
            //    }


            //    noteWrite.WriteLine(note);
          //  }

         //   noteWrite.Close();

         ///////////////////////////////////

           // CbListBase cb = new CbListBase();
          //  cb.temp();

            string temp = File.ReadAllText(@"notes.txt");

          //  OutPutScale = File.ReadAllText(@"notes.txt");

          //  OutPutLogic = File.ReadAllText(@"notes.txt");

            StreamWriter noteId = new(@"notes.txt", append: true);


            int[] scaleArray = new int[24];

            if (temp.Contains("C"))
            {
                scaleArray[0] = 1;
                scaleArray[12] = 13;
            }
            if (temp.Contains("C#"))
            {
                scaleArray[1] = 2;
                scaleArray[13] = 14;
            }
            if (temp.Contains("D"))
            {
                scaleArray[2] = 3;
                scaleArray[14] = 15;
            }
            if (temp.Contains("D#"))
            {
                scaleArray[3] = 4;
                scaleArray[15] = 16;
            }
            if (temp.Contains("E"))
            {
                scaleArray[4] = 5;
                scaleArray[16] = 17;
            }
            if (temp.Contains("F"))
            {
                scaleArray[5] = 6;
                scaleArray[17] = 18;
            }
            if (temp.Contains("F#"))
            {
                scaleArray[6] = 7;
                scaleArray[18] = 19;
            }
            if (temp.Contains("G"))
            {
                scaleArray[7] = 8;
                scaleArray[19] = 20;
            }
            if (temp.Contains("G#"))
            {
                scaleArray[8] = 9;
                scaleArray[20] = 21;
            }
            if (temp.Contains("A"))
            {
                scaleArray[9] = 10;
                scaleArray[21] = 22;
            }
            if (temp.Contains("A#"))
            {
                scaleArray[10] = 11;
                scaleArray[22] = 23;
            }
            if (temp.Contains("B"))
            {
                scaleArray[11] = 12;
                scaleArray[23] = 24;
            }

            foreach (var item in scaleArray)
            {
                noteId.WriteLine(item + " ");
            }



            noteId.Close();

            *************************************************************************
            
            
            int scaleLength = 0;
            
            string[] scaleNumbers = new string[scaleLength];

             string notesAsNumbers = File.ReadAllText(@"scaleConvert.txt");

            using StreamWriter sw = new("scaleConvert.txt", append: false);

            while(notesAsNumbers.Length > 0)                             //(scaleLength < -1)
            {
                scaleNumbers[scaleLength] = notesAsNumbers;
                sw.WriteLine(scaleNumbers[scaleLength]);
                
                scaleLength++;
            }

            sw.Close();


            =======================================

            
            //StreamWriter sw = new("chordLogic.txt", append: false);
            //sw.Write(" this is the chordlogic ");

            //sw.Close();
 
            //OutPutChordLogic = File.ReadAllText(@"chordLogic.txt");
       

        if (tempOriginal.Contains("C#")) temp = tempOriginal.Replace("C#", "R");
            if (tempOriginal.Contains("D#")) temp = tempOriginal.Replace("D#", "T");
            if (tempOriginal.Contains("F#")) temp = tempOriginal.Replace("F#", "Y");
            if (tempOriginal.Contains("G#")) temp = tempOriginal.Replace("G#", "U");
            if (tempOriginal.Contains("A#")) temp = tempOriginal.Replace("A#", "I");

            **********************************************************************


                       scaleArray.Trim();  
 
            // convert string to array 
            string[] newArray = new string[] { "" };
            newArray = scaleArray.Split(" ");

            // sort array
            Array.Sort(newArray);

            // convert array to string  
            StringBuilder builder = new StringBuilder();
            foreach (string sendArray in newArray)
            {
                builder.Append(sendArray);
                builder.Append(" ");
            }
            string result = builder.ToString();


            FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

                        // remove empty cells 
            string[] clearArray = new string[] { };
            int count = 0;
            int newCount = 0;
            while(count < 12)
            {
                if (!newArray[count].Equals(""))
                {
                    clearArray[newCount] = newArray[count];
                    newCount++; 
                }
             count++;
            }

            FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

                       //stringToArray.Length;
            for (int j = 0; j < 12;)   
            {
                {
                    for ( int k = 0;  k < 12; k++)
                    {
                        if (stringToArray[j].Equals(newArray[k]))
                        {
                            newArray[k] = stringToArray[j];
                            j++;
                           // continue;
                        }
                        else
                        {
                            newArray[k] = "X";
                        }
  
                    }                  
                }
            }


            ppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp

                       string[] newArray = { "A", "A#", "B" , "C", "C#", "D",
                                    "D#", "E", "F", "F#", "G", "G#"};


            //// convert array to string  
            //StringBuilder builder = new StringBuilder();
            //foreach (string sendArray in newArray)
            //{
            //    builder.Append(sendArray);
            //    builder.Append(" ");
            //}
            //string result = builder.ToString();


            if (stringToArray[0] == "A")    k = 0;
            if (stringToArray[1] == "A#")   k = 1;
            if (stringToArray[2] == "B")    k = 2;
            if (stringToArray[3] == "C")    k = 3;
            if (stringToArray[4] == "C#")   k = 4;
            if (stringToArray[5] == "D")    k = 5;
            if (stringToArray[6] == "D#")   k = 6;
            if (stringToArray[7] == "E")    k = 7;
            if (stringToArray[8] == "F")    k = 8;
            if (stringToArray[9] == "F#")   k = 9;
            if (stringToArray[10] == "G")   k =10;
            if (stringToArray[11] == "G#")  k =11;

                      {
                    newChord = valueTonic + foundThird + foundFifth + " ";
                    list.Add(newChord);
                    buildArray = list.ToArray();
                }

                i++;
            }
            //// convert array to string  
            StringBuilder builder = new StringBuilder();
            foreach (string sendArray in buildArray)
            {
                builder.Append(sendArray);
                builder.Append(" ");
            }
            result = builder.ToString();

 
            foreach (var item in result)
            {
                result = result.Replace("X", " ");
            }

            OutPutNotesChords = result;

            //  OutPutNotesChords = result;  newChord

            // OutPutNotesChords =  newArray[0] + newArray[4] + newArray[7] + " ";

        }
    }
}
